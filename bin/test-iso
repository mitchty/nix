#!/usr/bin/env nix-shell
#-*-mode: Shell-script; coding: utf-8;-*-
#!nix-shell -i bash -p bash qemu jq OVMF
# SPDX-License-Identifier: BlueOak-1.0.0
# Description: Want to test out the autoinstall iso setup.
_base=$(basename "$0")
_dir=$(cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P || exit 126)
export _base _dir

set -xeu
efibios=$(nix derivation show -r nixpkgs#OVMF | jq -r '. | with_entries( select(.key|contains("-OVMF-20"))) | .[].outputs.fd.path')
qemuargs="-bios ${efibios}/FV/OVMF.fd -enable-kvm -smp 4 -nographic -m 8096 -boot d -net user,hostfwd=tcp::10022-:22 -net nic"

get_iso() {
  readlink -f $(find -L ${_dir}/.. -name custom.iso -type f | head -n1)
}

# Test out single, zfs, and lvm autoinstalls, the end result is these vm's
# shouldn't stay running forever
#
# I need to come up with some way to get this into nix flake checks that makes
# sense.

# typ=isoTest
# nix build ${NIXOPTS-} ".#isoWm2"
# tmpdir="/tmp/${typ}"
# trap "rm -fr ${tmpdir}" EXIT TERM INT QUIT

# disk0="/tmp/vdisk0"
# qemu-img create -f qcow2 ${disk0} 40G

# qemu-system-x86_64 -enable-kvm -smp 4 -nographic -m 8096 -boot d -cdrom $(find -L ${_dir}/.. -name custom.iso) -hda ${disk0} -net user,hostfwd=tcp::10022-:22 -net nic

# exit

# Single simple one disk straight up fs setup.
typ=isoSimpleTest
nix build ${NIXOPTS-} ".#${typ}"
iso=$(get_iso)
tmpdir="/tmp/${typ}"
trap "rm -fr ${tmpdir}" EXIT TERM INT QUIT

disk0="/tmp/vdisk0"
qemu-img create -f qcow2 ${disk0} 40G

qemu-system-x86_64 ${qemuargs} -cdrom ${iso} -hda ${disk0}
# qemu-system-x86_64 -enable-kvm -smp 4 -nographic -m 8096 -boot d -cdrom $(find -L ${_dir}/.. -name custom.iso) -hda ${disk0} -net user,hostfwd=tcp::10022-:22 -net nic

typ=isoZfsTest
nix build ${NIXOPTS-} ".#${typ}"
iso=$(get_iso)
tmpdir="/tmp/${typ}"
trap "rm -fr ${tmpdir}" EXIT TERM INT QUIT

disk0="/tmp/vdisk0"
qemu-img create -f qcow2 ${disk0} 40G
disk1="/tmp/vdisk1"
qemu-img create -f qcow2 ${disk1} 40G

qemu-system-x86_64 ${qemuargs} -cdrom ${iso} -hda ${disk0} -hdb ${disk1}
#qemu-system-x86_64 -bios ${efibios}/FV/OVMF.fd -enable-kvm -smp 4 -nographic -m 8096 -boot d -cdrom $(find -L ${_dir}/.. -name custom.iso) -hda ${disk0} -hdb ${disk1} -net user,hostfwd=tcp::10022-:22 -net nic
#qemu-system-x86_64 -enable-kvm -smp 4 -nographic -m 8096 -boot d -hda ${disk0} -hdb ${disk1} -net user,hostfwd=tcp::10022-:22 -net nic
