#!/usr/bin/env sh
#-*-mode: Shell-script; coding: utf-8;-*-
# SPDX-License-Identifier: BlueOak-1.0.0

# Cheap copy function to make copying a file via ssh from one host
# to another less painful, use pipeviewer to give some idea as to progress.
sshcopy() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: copy source:/file/location destination:/file/location"
  else
    srchost="$(echo "$1" | awk -F: '{print $1}')"
    src="$(echo "$1" | awk -F: '{print $2}')"
    dsthost="$(echo "$2" | awk -F: '{print $1}')"
    dst="$(echo "$2" | awk -F: '{print $2}')"
    size=$(ssh "$srchost" du -hs "$src" 2> /dev/null)
    if [ "${size}" = "" ]; then
      echo "${src} doesn't seem to exist on ${srchost}"
      return 1
    fi
    size=$(echo "${size}" | awk '{print $1}')
    echo "Copying $size to $dst"
    (ssh "${srchost}" "/bin/cat ${src}" | pv -cb -N copied - | ssh "$dsthost" "/bin/cat - > ${dst}") 2> /dev/null
  fi
}

# extract function to automate being lazy at extracting archives.
extract() {
  if [ -f "$1" ]; then
    case ${1} in
      ,*.tar.bz2 | *.tbz2 | *.tbz) bunzip2 -c "$1" | tar xvf - ;;
      ,*.tar.gz | *.tgz) gunzip -c "$1" | tar xvf - ;;
      ,*.tz | *.tar.z) zcat "$1" | tar xvf - ;;
      ,*.tar.xz | *.txz | *.tpxz) xz -d -c "$1" | tar xvf - ;;
      ,*.bz2) bunzip2 "$1" ;;
      ,*.gz) gunzip "$1" ;;
      ,*.jar | *.zip) unzip "$1" ;;
      ,*.rar) unrar x "$1" ;;
      ,*.tar) tar -xvf "$1" ;;
      ,*.z) uncompress "$1" ;;
      ,*.rpm) rpm2cpio "$1" | cpio -idv ;;
      ,*) echo "Unable to extract <$1> Unknown extension." ;;
    esac
  else
    print "File <$1> does not exist."
  fi
}

# Tcsh compatibility so I can be a lazy bastard and paste things directly
# if/when I need to.
setenv() {
  export "$1=$2"
}

# Just to be lazy, set/unset the DEBUG env variable used in my scripts
debug() {
  if [ -z "$DEBUG" ]; then
    if [ -z "$1" ]; then
      echo Setting DEBUG to "$1"
      setenv DEBUG "$1"
    else
      echo Setting DEBUG to default
      setenv DEBUG default
    fi
  else
    echo Unsetting DEBUG
    unset DEBUG
  fi
}

login_shell() {
  [ "$-" = "*i*" ]
}

# TODO: figure out a way to concatenate things based on roles like git tmux
# etc... for now whatever.

t() {
  if [ -z "$1" ]; then
    printf "Supply a tmux session name to connect to/create\n" >&2
  else
    tmux has-session -t "$1" 2> /dev/null || tmux new-session -d -s "$1"
    tmux attach-session -d -t "$1"
  fi
}

# general aliases
alias s=ssh
alias quit=exit
alias cr='reset; clear'
alias a=ag
alias n=noglob
alias l=ls
alias L='ls -dal'
alias cleandir="find . -type f \( -name '*~' -o -name '#*#' -o -name '.*~' -o -name '.#*#' -o -name 'core' -o -name 'dead.letter*' \) | grep -v auto-save-list | xargs -t rm"

# Prefer less for paging duties.
if which less > /dev/null 2>&1; then
  alias T="\$(which less) -f +F"
else
  alias T="\$(which tail) -f"
fi

alias e=emacs
alias de='emacs --debug-init -nw'
alias ec=emacsclient
alias ect='emacsclient -t'
alias oec='emacsclient -n -c'
alias stope='emacsclient -t -e "(save-buffers-kill-emacs)(kill-emacs)"'
alias kille='emacsclient -e "(kill-emacs)"'

alias g=git
alias m=mosh
alias tl='tmux ls'
alias tp="tmuxp load \${HOST}"
alias res='. ~/.profile'

# Seriously don't get how syncthing constantly breaks stuff when I only make
# changes on ONE machine.
alias watdidstbreak='find . -type f -name "*sync-conflict*" -print'

# Run nixpkgs-fmt and format things iff there are changes.
alias nfmt='find . -type f -name \*\.nix -exec sh -c "nixpkgs-fmt --check {} > /dev/null 2>&1 || nixpkgs-fmt {}" \;'

# Find dead code in nix files
alias nded='find . -type f -name \*\.nix -exec deadnix {} \+'

# Home backup/rsync alias until I get restic working again.
alias hb='rsync -e "ssh -T -c aes128-ctr -o Compression=no -x" --exclude .cache --exclude target/debug --exclude target/release --exclude packer_cache --exclude baloo/index --delete-excluded --progress --delete -Havz $HOME root@dfs1.local:/mnt/rsync/$(uname -n)'

PATH="${PATH}:${HOME}/bin:${HOME}/.local/bin"
export PATH

# Mostly to make it easy to jumpstart a rust project nix+cargo+git all in one
# via the crane flake.
crane() {
  unset _crane_dir _crane_name

  # Arg is the directory to do stuff to, required
  _crane_dir=${1?}
  shift > /dev/null 2>&1 || :
  _crane_name=${1}

  if [ -e "${_crane_dir}" ]; then
    printf "fatal: %S already exists, refusing to use it for anything\n" "${_crane_dir}" >&2
    return 1
  fi

  install -dm755 "${_crane_dir}"

  cd "${_crane_dir}" || return 126

  nix flake init -t github:ipetkov/crane
  git init

  printf "result\ntarget\n" > .gitignore
  printf 'use flake\n' > .envrc

  # Rename it if we want a different name for the thing
  if [ -n "${_crane_name}" ]; then
    sed -i '' -e "s/quick-start/${_crane_name}/g" -e "s/my-crate/${_crane_name}/g" Cargo.toml flake.nix
  fi

  git add -A
  git commit -m "nix flake init -t github:ipetkov/crane"
}

alias nbld='nix build && nix flake check'

# to be lazy
nrsci() {
  find . \( -name "*.rs" -o -name "*.nix" -o -name "*.toml" \) -type f | entr -d sh -c "time nix build && time nix flake check; printf '%s %s\n' \"\`date\`\" \$(git diff | sha256sum | awk '{print \$1}')"
}

nci() {
  find . \( -name "*.lock" -o -name "*.nix" \) -type f | entr -d sh -c "time nix build && time nix flake check; printf '%s %s\n' \"\`date\`\" \$(git diff | sha256sum | awk '{print \$1}')"
}
