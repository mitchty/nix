#!/usr/bin/env sh
#-*-mode: Shell-script; coding: utf-8;-*-
# SPDX-License-Identifier: BlueOak-1.0.0
#shellcheck disable=SC3034

# Cheap copy function to make copying a file via ssh from one host
# to another less painful, use pipeviewer to give some idea as to progress.
sshcopy() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: copy source:/file/location destination:/file/location"
  else
    srchost="$(echo "$1" | awk -F: '{print $1}')"
    src="$(echo "$1" | awk -F: '{print $2}')"
    dsthost="$(echo "$2" | awk -F: '{print $1}')"
    dst="$(echo "$2" | awk -F: '{print $2}')"
    size=$(ssh "$srchost" du -hs "$src" 2> /dev/null)
    if [ "${size}" = "" ]; then
      echo "${src} doesn't seem to exist on ${srchost}"
      return 1
    fi
    size=$(echo "${size}" | awk '{print $1}')
    echo "Copying $size to $dst"
    (ssh "${srchost}" "cat ${src}" | pv -cb -N copied - | ssh "$dsthost" "cat - > ${dst}") 2> /dev/null
  fi
}

# extract function to automate being lazy at extracting archives.
extract() {
  if [ -f "$1" ]; then
    case ${1} in
      ,*.tar.bz2 | *.tbz2 | *.tbz) bunzip2 -c "$1" | tar xvf - ;;
      ,*.tar.gz | *.tgz) gunzip -c "$1" | tar xvf - ;;
      ,*.tz | *.tar.z) zcat "$1" | tar xvf - ;;
      ,*.tar.xz | *.txz | *.tpxz) xz -d -c "$1" | tar xvf - ;;
      ,*.bz2) bunzip2 "$1" ;;
      ,*.gz) gunzip "$1" ;;
      ,*.jar | *.zip) unzip "$1" ;;
      ,*.rar) unrar x "$1" ;;
      ,*.tar) tar -xvf "$1" ;;
      ,*.z) uncompress "$1" ;;
      ,*.rpm) rpm2cpio "$1" | cpio -idv ;;
      ,*) printf "fatal: unable to extract: %s Unknown extension\n" "${1}" ;;
    esac
  else
    print "File <$1> does not exist."
  fi
}

# Tcsh compatibility so I can be a lazy bastard and paste things directly
# if/when I need to.
setenv() {
  export "$1=$2"
}

# Just to be lazy, set/unset the DEBUG env variable used in my scripts
debug() {
  if [ -z "$DEBUG" ]; then
    if [ -z "$1" ]; then
      echo Setting DEBUG to "$1"
      setenv DEBUG "$1"
    else
      echo Setting DEBUG to default
      setenv DEBUG default
    fi
  else
    echo Unsetting DEBUG
    unset DEBUG
  fi
}

login_shell() {
  [ "$-" = "*i*" ]
}

# TODO: figure out a way to concatenate things based on roles like git tmux
# etc... for now whatever.

t() {
  if [ -z "$1" ]; then
    printf "Supply a tmux session name to connect to/create\n" >&2
  else
    tmux has-session -t "$1" 2> /dev/null || tmux new-session -d -s "$1"
    tmux attach-session -d -t "$1"
  fi
}

# general aliases
alias s=ssh
alias quit=exit
alias rc='reset; clear'
alias a=ag
alias n=noglob
alias l=ls
alias L='ls -dal'
alias cleandir="find . -type f \( -name '*~' -o -name '#*#' -o -name '.*~' -o -name '.#*#' -o -name 'core' -o -name 'dead.letter*' \) | grep -v auto-save-list | xargs -t rm"

# Prefer less for paging duties.
if which less > /dev/null 2>&1; then
  alias T="\$(which less) -f +F"
else
  alias T="\$(which tail) -f"
fi

alias e=emacs
alias de='emacs --debug-init -nw'
alias ec=emacsclient
alias ect='emacsclient -t'
alias oec='emacsclient -n -c'
alias stope='emacsclient -t -e "(save-buffers-kill-emacs)(kill-emacs)"'
alias kille='emacsclient -e "(kill-emacs)"'

alias g=git
alias m=mosh
alias tl='tmux ls'
alias res='. ~/.profile'

# List out all the tmuxp configs present
tpl() {
  (cd ~/.config/tmuxp && echo * | sed -e 's/\.yml//g')
}

tp() {
  tmuxpfile="${1:-$HOST}"
  if [ -e "${HOME}/.config/tmuxp/${tmuxpfile}.yml" ]; then
    tmuxp load "${tmuxpfile}"
  fi
}

# Seriously don't get how syncthing constantly breaks stuff when I only make
# changes on ONE machine.
alias watdidstbreak='find . -type f -name "*sync-conflict*" -print'

# Run nixpkgs-fmt and format things iff there are changes.
alias nfmt='find . -type f -name \*\.nix -exec sh -c "nixfmt --check {} > /dev/null 2>&1 || nixpkgs-fmt {}" \;'

# Find dead code in nix files
alias nded='find . -type f -name \*\.nix -exec deadnix {} \+'

# Home backup/rsync alias until I get restic working again.
alias hb='rsync -e "ssh -T -c aes128-ctr -o Compression=no -x" --exclude .cache --exclude target/debug --exclude target/release --exclude packer_cache --exclude baloo/index --delete-excluded --progress --delete -Havz $HOME root@dfs1.local:/mnt/rsync/$(uname -n)'

PATH="${PATH}:${HOME}/bin:${HOME}/.local/bin"
export PATH

# Mostly to make it easy to jumpstart a rust project nix+cargo+git all in one
# via the crane flake.
crane() {
  # Arg is the directory to do stuff to, required
  local _crane_dir="${1?}"
  shift > /dev/null 2>&1 || :
  local _crane_name="${1}"

  if [ -e "${_crane_dir}" ]; then
    printf "fatal: %s already exists, refusing to use it for anything\n" "${_crane_dir}" >&2
    return 1
  fi

  install -dm755 "${_crane_dir}"

  cd "${_crane_dir}" || return 126

  template="${CRANE_TEMPLATE:+#}${CRANE_TEMPLATE:-}"
  nix flake init -t github:ipetkov/crane"${template}"
  git init

  printf "result\ntarget\n" > .gitignore

  # Go away I know; this is intentional, makes it easier to just use the
  # binaries created directly.
  #shellcheck disable=SC2016
  printf 'export PATH=$PATH:$(pwd)/result/bin\nuse flake\n' > .envrc
  git add -A

  direnv allow
  # Rename it if we want a different name for the thing
  if [ -n "${_crane_name}" ]; then
    sed_inplace -e "s/quick-start/${_crane_name}/g" -e "s/cross-musl/${_crane_name}/g" -e "s/my-crate/${_crane_name}/g" Cargo.toml flake.nix
  fi

  # Set the license to blue oak by default for my crap
  sed_inplace -e "s/MIT/Blue Oak Model License 1.0.0/g" Cargo.toml

  nix run nixpkgs#cargo -- update

  # Get the basic build cached straight away.
  nix build

  git add -A
  git commit -m "nix flake init -t github:ipetkov/crane${template}"
}

kdiff() {
  lhs="${1?need a number for the diff to start}"
  shift
  rhs="${1?need a number for the diff to end}"
  lhsid=$(kopia snapshot list | tac | awk 'NR == '${rhs}' && /files/ {print $4}')
  rhsid=$(kopia snapshot list | tac | awk 'NR == '${lhs}' && /files/ {print $4}')
  kopia diff "${lhsid}" "${rhsid}"
}

alias nbld='nix build && nix flake check'

# to be lazy
nrsci() {
  find . \( -name "*.rs" -o -name "*.nix" -o -name "*.toml" \) -type f | entr -d sh -c "time nix build && time nix flake check; printf '%s %s\n' \"\`date\`\" \$(git diff | sha256sum | awk '{print \$1}')"
}

nci() {
  find . \( -name "*.lock" -o -name "*.nix" \) -type f | entr -d sh -c "time nix build && time nix flake check; printf '%s %s\n' \"\`date\`\" \$(git diff | sha256sum | awk '{print \$1}')"
}

# Wrapped entr to handle when the directory gets updated and it exits and just
# restart using the last files input, also handle if/when you control-c (rc >
# 128 basically assuming a non crap non posix compliant exec() shell should be
# rc 130) Pass the stuff to watch on stdin and args are what is passed to entr
#
# Added ability to specify command to run via WENTR env var, this will append to
# whatever was passed in on stdin if anything. This should allow new files/dirs
# to get detected on the fly by allowing a command to be used to detect them.
wentr() {
  if [ ! -t 0 ]; then
    local files="$(cat /dev/stdin)"
  else
    local files=""
  fi
  while [ $? -le 128 ]; do
    sleep 1
    local union=${files}
    if [ -n "${WENTR}" ]; then
      local new=$(eval ${WENTR})
      union="${union}\n${new}"
    fi
    echo "${union}" | entr -crznpad "$@"
  done
}

h() {
  # PUBTOKEN="${HOME}/.gh-cli-pub${CATEGORY+-}${CATEGORY-}"
  PUBTOKEN="${HOME}/.gh-cli-${CATEGORY:-pub}"

  if [ -e "${PUBTOKEN}" ]; then
    # Double quote my ass this is useless here
    #shellcheck disable=SC2086
    GH_TOKEN="$(cat ${PUBTOKEN})" gh "$@"
  else
    printf "warn: didn't find public token file %s nothing done\n" "${PUBTOKEN}" >&2
  fi
}

# mutagen wrapper to let me get at data I need quicker
mut() {
  if [ "status" = "$1" ]; then
    mutagen sync list --template="{{ json . }}" | jq -r ".[] | [.name, .status, .alpha.path, \"->\", .beta.host, .beta.path] | @tsv" | sed -e "s|$HOME|~|g"
  else
    mutagen "$@"
  fi
}

# I only allow what I want and don't like typing letters
da() {
  direnv allow
}

#^^^ but tag .#release for my shit
nbr() {
  nb .#release
}

cb() {
  time cargo build "$@"
}

cbr() {
  cb --release
}

# Private localhost work that I don't trust being in "da klowd", this is all
# backed up and synced across computers so watevs.
prg() {
  prv try_git localhost/"$*"
}

# Work related section

# Save on typing wrk gi ... all the time...
wgi() {
  wrk gi "$@"
}

wbod() {
  cd ~/src/wrk/wip || return 126
  # I'm not writing to the same file stoppit
  #shellcheck disable=SC2094
  j todo > todo
  git add todo && git ci -m "bod: $(date +%Y-%b-%d)"
}

weod() {
  cd ~/src/wrk/wip || return 126
  # I'm not writing to the same file stoppit
  #shellcheck disable=SC2094
  j todo > todo
  git add todo && git ci -m "eod: $(date +%Y-%b-%d)"
  eod
}

# Daily jira cli alias, first arg should always be something jira-cli doesn't
# have so it can fall through to the cli if its not known. That way this acts
# like a fancy alias with extra features.
j() {
  # NO quoting bad here too
  #shellcheck disable=SC2086
  if [ "todo" = "$1" ]; then
    shift
    jira issue list -a "$(jira me)" --plain --jql 'project is not empty and status not in (Closed,Done)' --no-headers --columns KEY,TYPE,STATUS,SUMMARY
  elif [ "unassign" = "$1" ]; then
    shift
    jira issue assign $1 x
  elif [ "self" = "$1" ]; then
    shift
    jira issue assign $1 "$(jira me)"
    # Special arg that assigns and moves the ticket to in progress
  elif [ "wip" = "$1" ]; then
    shift
    j self "$@"
    j inprogress "$@"
    return
  elif [ "inprogress" = "$1" ]; then
    shift
    jira issue move $1 'In Progress'
  elif [ "inreview" = "$1" ]; then
    shift
    jira issue move $1 'In Review'
  elif [ "done" = "$1" ]; then
    shift
    jira issue move $1 'Done'
  elif [ "comment" = "$1" ]; then
    shift
    jira issue comment add '$*'
  elif [ "spy" = "$1" ]; then
    shift
    jira issue view --comments 3 --plain $1
  elif [ "deluge" = "$1" ]; then
    shift
    jira issue view --comments 10000 --plain $1
  else
    jira "$@"
  fi
}
