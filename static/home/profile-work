#-*-mode: Shell-script; coding: utf-8;-*-
# SPDX-License-Identifier: BlueOak-1.0.0

# Silly function to "convert" (mostly) an openrc file from openstack to a .envrc file
# TODO: Future me figure out a better option maybe with age maybe?
openrctoenvrc() {
  grep export "$@" | squishws | hidepass >> .envrc
}

stash() {
  wrk try_git "https://stash.us.cray.com/scm/${1}.git" "${2:-}"
}

hgi() {
  wrk try_git "https://github.hpe.com/${1}" "${2:-}"
}

# Save on typing wrk gi ... all the time...
wgi() {
  wrk gi "$@"
}

wbod() {
  cd ~/src/wrk/wip
  j todo > todo
  git add todo && git ci -m "bod: $(date +%Y-%b-%d)"
}

weod() {
  cd ~/src/wrk/wip
  j todo > todo
  git add todo && git ci -m "eod: $(date +%Y-%b-%d)"
  eod
}

# Daily jira cli alias, first arg should always be something jira-cli doens't
# have so it can fall through to the cli if its not known. That way this acts
# like a fancy alias with extra features.
j() {
  if [ "todo" = "$1" ]; then
    shift
    jira issue list -a "$(jira me)" --plain --jql 'project is not empty and status not in (Closed,Done)' --no-headers --columns KEY,TYPE,STATUS,SUMMARY
  elif [ "unassign" = "$1" ]; then
    shift
    jira issue assign $1 x
  elif [ "self" = "$1" ]; then
    shift
    jira issue assign $1 $(jira me)
    # Special arg that assigns and moves the ticket to in progress
  elif [ "wip" = "$1" ]; then
    shift
    j self "$@"
    j inprogress "$@"
    return
  elif [ "inprogress" = "$1" ]; then
    shift
    jira issue move $1 'In Progress'
  elif [ "inreview" = "$1" ]; then
    shift
    jira issue move $1 'In Review'
  elif [ "done" = "$1" ]; then
    shift
    jira issue move $1 'Done'
  elif [ "comment" = "$1" ]; then
    shift
    jira issue comment add '$*'
  elif [ "spy" = "$1" ]; then
    shift
    jira issue view --comments 3 --plain $1
  elif [ "deluge" = "$1" ]; then
    shift
    jira issue view --comments 10000 --plain $1
  else
    jira $@
  fi
}

# Note I largely (ab)used https://stackoverflow.com/questions/62356589/how-to-use-gcloud-cli-to-update-firewall-rules-to-append-new-ip-addresses-to-sou for this nonsense and it woiks.
# Get current firewall ips as a comma delimited list
hpe_gcp_fw_current() {
  project="${1?}"

  gcloud compute --project ${project?} firewall-rules describe nmn-allow-ing-ssh-trusted-any --format="value[delimiter=',',terminator=','](sourceRanges)"
}

# Append to sys gcp firewall ip address
hpe_gcp_append_ip() {
  sys="${1?require first arg to be the system name to append to}"
  shift || :
  ip="${1:=$(curl -s ifconfig.me)/32}"

  project=$(hpe_gcp_project ${sys})
  gcloud compute --project ${project?} firewall-rules update nmn-allow-ing-ssh-trusted-any --source-ranges="$(hpe_gcp_fw_current ${project})${ip}"
}

# Remove from system firewall ip address
hpe_gcp_remove_ip() {
  sys="${1?}"
  shift
  ip="${1?}"

  project=$(hpe_gcp_project ${sys})
  gcloud compute --project ${project?} firewall-rules update nmn-allow-ing-ssh-trusted-any --source-ranges="$(hpe_gcp_fw_current ${project})#${ip},"
}

# $ hpe_gcp_ssh beau
# gcloud compute --project hpe-beau-csm-livecd-18a5 ssh root@pit --zone=us-central1-a
# $ hpe_gcp_ssh fearne
# gcloud compute --project hpe-fearne-csm-livecd-3e07 ssh root@pit --zone=us-central1-c
# $ hpe_gcp_ssh caleb
# $

hpe_gcp_project() {
  sys="${1?}"
  projects=$(gcloud projects list --filter="name = hpe-${sys}-csm-livecd" --format="value(PROJECT_ID)")
  if [ 1 -eq "$(echo ${projects} | wc -l)" ]; then
    echo "${projects}"
  else
    echo "${projects}" | fzf
  fi
}

hpe_gcp_zone() {
  sys="${1?}"
  gcloud compute instances list --filter="pit" --format="value(zone)" --project $(hpe_gcp_project ${sys}) | head -n1
}

# spits out the gcloud ssh nonsense if wanted
_hpe_gcp_ssh() {
  sys="${1?need a system to ssh to}"
  shift
  project=$(hpe_gcp_project ${sys})
  zone=$(hpe_gcp_zone ${sys})

  printf "gcloud compute --project %s ssh root@pit --zone=%s -- %s\n" "${project?}" "${zone?}" "$@"
}

# spits out the gcloud scp nonsense if wanted
_hpe_gcp_scp() {
  sys="${1?need a system to scp to}"
  shift
  project=$(hpe_gcp_project ${sys})
  zone=$(hpe_gcp_zone ${sys})

  lhs="${1?need a lhs to copy from/to}"
  shift
  rhs="${1?need a rhs to copy from/to}"

  # The shorthand here is whichever of the lhs/rhs start with an : determines
  # what gcloud scp command we output to cover :remote local and local :remote
  # cases, if neither just bail as user error.
  if echo "${lhs}" | grep -q '^:'; then
    printf "gcloud compute --project %s scp root@pit%s %s --zone=%s\n" "${project?}" "${lhs}" "${rhs}" "${zone?}"
  elif echo "${rhs}" | grep -q '^:'; then
    printf "gcloud compute --project %s scp %s root@pit%s --zone=%s\n" "${project?}" "${lhs}" "${rhs}" "${zone?}"
  else
    printf "Need at least one arg that specifies a remote destination with :\n" >&2
    return 1
  fi
}

hpe_gcp_ssh() {
  eval $(_hpe_gcp_ssh "$@")
}

hpe_gcp_scp() {
  eval $(_hpe_gcp_scp "$@")
}

# Setup ~/.ssh/config-gcp with this project
#
# Include it in your ~/.ssh/config file if you want to use it.
hpe_gcp_ssh_config_add() {
  sys="${1?}"

  project=$(hpe_gcp_project ${sys})
  gcloud config set project ${project?}
  gcloud compute config-ssh --ssh-config-file "${HOME}/.ssh/config-gcp"
}

# Do I even need this? I put all this stuff in its own ssh config file so I can
# just remove the file... Here for future me to figure out if it matters at all.
# Sorry future me past me is a jerk again. TODO: keep me or refactor to just rm
# the file? Only the shadow knows.
hpe_gcp_ssh_config_rm() {
  sys="${1?}"

  project=$(hpe_gcp_project ${sys})
  gcloud config set project ${project?}
  gcloud compute config-ssh --remove --ssh-config-file "${HOME}/.ssh/config-gcp"
}

# From https://github.com/bkahlert/kill-zscaler mostly
start_zscaler() {
  open -a /Applications/Zscaler/Zscaler.app --hide
  sudo find /Library/LaunchDaemons -name '*zscaler*' -exec launchctl load {} \;
}

stop_zscaler() {
  find /Library/LaunchAgents -name '*zscaler*' -exec launchctl unload -w {} \;
  sudo find /Library/LaunchDaemons -name '*zscaler*' -exec launchctl unload -w {} \;
}

# Make abusing .patch files from github or locally easier... cause I'm a lazy jerk
maybe_patch() {
  input="$(cat /dev/stdin)"
  patchargs=${patchargs:--p1}
  if echo "${input}" | patch -R -s -f --dry-run ${patchargs}; then
    printf "patch already applied\n" >&2
  else
    echo "${input}" | patch ${patchargs}
  fi
}
