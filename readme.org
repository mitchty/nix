* My home network nix flake setup

  So my goal with all this is to get as much into a NixOS layout for home. Now that Flakes are "kinda/sorta" out it seems the best time to convert everything over to flakes.

** Nix resources

  Because nix isn't exactly a "common" thing to encounter as a programming language/package manager...

  - https://nixos.org/guides/nix-pills/
  - https://nix.dev/
  - https://github.com/tazjin/nix-1p
  - https://learnxinyminutes.com/docs/nix/
  - https://teu5us.github.io/nix-lib.html
  - https://ryantm.github.io/nixpkgs/functions/library/strings/
  - https://wiki.nikitavoloboev.xyz/operating-systems/linux/nixos
  - https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html

  NixOS option search, for when you want to know what you can set.
  https://search.nixos.org/options

  Home-manager equivalent.
  https://rycee.gitlab.io/home-manager/options.html

  A nice cli that searches both is https://github.com/mlvzk/manix

** Potent Notables

   So what in here is worth looking at exactly? Well this is a combined NixOS and x86 Macos setup with home manager. That is, while its incomplete I manage both my macos laptop and any/all NixOS nodes from this shared flake repo.

   There is also iso generation and autoinstall setup as well, for that reference [[file:modules/iso/autoinstall.nix][this autoinstall module]]. As well as the generators in [[file:flake.nix][flake.nix]] (search for iso).

   My current setup is basically build an iso that will autoinstall nixos onto a system then poweroff/reboot and from there I can pivot that install into this install via deploy-rs.

   On the deploy-rs note, the flake file also has those.

** Rough usage

   So the flake has deploy targets setup already for deploy-rs, to update/rebuild all NixOS nodes run:

#+begin_src shell
clear; nix flake check --show-trace && nix run github:serokell/deploy-rs -- -s .
#+end_src

   Or use the wrapper function in [[file:static/home/profile][.profile]]:

#+begin_src shell
deploy
#+end_src

   To run a deploy with a *nix flake check* run:

#+begin_src shell
deploy check
#+end_src

And should be good to go. Caveats on how/where deploy-rs can deploy to aside. Aka that without builder setup cannot deploy to a macos system from linux. This is on my TODO list to fix at some point.

** Layout

   Since I'm trying to document things a bit more a bit of layout convention explanation:

   - [[file:bin/][bin]]     Simply a directory for any pertinent scripts that use this repo. Note none of these scripts end up in */nix/store*.
   - [[file:src/][src]]     Source for stuff in bin.
   - [[file:hosts/][hosts]]   Host specific data, e.g. mostly generated nix configuration files.
   - [[file:img/][img]]     Nixos specific directory where iso or disk image outputs get dumped.
   - [[file:modules/][modules]] General directory for any modules for nixos, nix-darwin, and home-manager. Should be intended to encompass "stuff with options". Also includes the img autoinstall module used for iso builds.
   - [[file:patches/][patches]] Any patch files that may be needed for things like CVE's that might not yet be upstream yet in nixpkgs or anywhere else.
   - [[file:secrets/][secrets]] Any secret related data for age and/or git-transcrypt. Basically "private junk hiding in plain sight".
   - [[file:static/][static]]  Bucket for any static files, which generally amounts to either fragments or full bits of files like say *.profile* that the rest of the flake will use.

* Braindump

Useful things I tend to forget so in the readme they go...

** List generations

#+begin_src shell
nix-env --list-generations --profile /nix/var/nix/profiles/system
#+end_src

** Rolling back to a specific generation

Cause sometimes *nixos-rebuild switch --rollback* isn't enough or you have multiple generations that are no good.

#+begin_src shell
nix-env --switch-generation $GENERATION --profile /nix/var/nix/profiles/system
/nix/var/nix/profiles/system/bin/switch-to-configuration switch
#+end_src

* Todo's

** Pipewire

  Refs:
  - https://nixos.wiki/wiki/PipeWire
  - https://wiki.archlinux.org/title/PipeWire
  - https://github.com/NixOS/nixpkgs/issues/102547

  Need to get pipewire tested again, probably via this to do things simple first to see if newer pipewire is less fiddly:

#+begin_src conf
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  jack.enable = true;
  pulse.enable = true;
  socketActivation = true;
};
programs.dconf.enable = true;
services.gnome.at-spi2-core.enable = true;
#+end_src

** Network booting?

  Might be fun to look into for a pi4 k8s cluster or something.

  https://github.com/DeterminateSystems/nix-netboot-serve

* Random notes

Cause I forget and this is a readme so why not stick it here:

List out nixos generations as root:

#+begin_src sh
nix-env --list-generations --profile /nix/var/nix/profiles/system
#+end_src

Switch/rollback to prior generation, also as root:

#+begin_src sh
nixos-rebuild switch --rollback
#+end_src
